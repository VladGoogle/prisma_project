// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  email     String  @unique
  password  String
  phone     String
  type      Role
  card      Card?
  orders    Order[]
}

model Card {
  id           Int           @id @default(autoincrement())
  externalId   String
  user         User          @relation(fields: [userId], references: [id])
  userId       Int           @unique
  transactions Transaction[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Label {
  id       Int       @id @default(autoincrement())
  name     String
  image    String
  products Product[]
}

model Modifier {
  id                Int                @id @default(autoincrement())
  name              String?
  price             Int
  modToProds        ModToProd[]
  modToProdsToOrder ModToProdToOrder[]
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String?
  price       Int
  description String?
  label       Label       @relation(fields: [labelId], references: [id])
  labelId     Int
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  Int
  modToProds  ModToProd[]
}

model ModToProd {
  id           Int           @id @default(autoincrement())
  product      Product       @relation(fields: [productId], references: [id])
  productId    Int
  modifier     Modifier      @relation(fields: [modifierId], references: [id])
  modifierId   Int
  productOrder ProductOrder?
}

model ProductOrder {
  id                Int                @id @default(autoincrement())
  quantity          Int
  price             Int
  modToProd         ModToProd?         @relation(fields: [modToProdId], references: [id])
  modToProdId       Int                @unique
  modToProdsToOrder ModToProdToOrder[]
  order             Order?
}

model ModToProdToOrder {
  id                Int          @id @default(autoincrement())
  productOrder      ProductOrder @relation(fields: [productOrderId], references: [id])
  productOrderId    Int
  modifier          Modifier     @relation(fields: [modifierId], references: [id])
  modifierId        Int
  totalProductPrice Int
  order             Order?
}

model Order {
  id                 Int               @id @default(autoincrement())
  description        String?
  totalPrice         Int
  tax                Int
  status             OrderStatus
  isMods             Boolean
  user               User              @relation(fields: [userId], references: [id])
  userId             Int
  productOrder       ProductOrder?     @relation(fields: [productOrderId], references: [id])
  productOrderId     Int?              @unique
  modToProdToOrder   ModToProdToOrder? @relation(fields: [modToProdToOrderId], references: [id])
  modToProdToOrderId Int?              @unique
  transaction        Transaction?
}

model Transaction {
  id            Int            @id @default(autoincrement())
  source        String
  amount        Int
  status        ChargeStatus
  currency      ChargeCurrency
  description   String?
  customerToken String
  order         Order?         @relation(fields: [orderId], references: [id])
  orderId       Int            @unique
  card          Card?          @relation(fields: [cardId], references: [id])
  cardId        Int
}

enum Role {
  CUSTOMER
  ADMIN
}

enum ChargeStatus {
  SUCCEEDED
  REFUNDED
}

enum ChargeCurrency {
  USD
  RUB
}

enum OrderStatus {
  RECEIVED
  PROCESSING
  READY
}

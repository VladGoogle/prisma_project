// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  firstName String?
  lastName  String?
  email     String?   @unique
  password  String?
  phone     String?
  roles     Role[]
  card      Card?
  orders    Order[]
  token     String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Card {
  id           Int           @id @default(autoincrement())
  externalId   String
  source       String?
  user         User          @relation(fields: [userId], references: [id])
  userId       Int           @unique
  transactions Transaction[]
  createdAt    DateTime?     @default(now())
  updatedAt    DateTime?     @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Label {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  image     String?
  products  Product[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Modifier {
  id                Int                @id @default(autoincrement())
  name              String?
  price             Float
  modToProds        ModToProd[]
  modToProdsToOrder ModToProdToOrder[]
  createdAt         DateTime?          @default(now())
  updatedAt         DateTime?          @updatedAt
}

model Product {
  id            Int           @id @default(autoincrement())
  name          String?
  price         Float
  description   String?
  label         Label         @relation(fields: [labelId], references: [id])
  labelId       Int
  category      Category      @relation(fields: [categoryId], references: [id])
  categoryId    Int
  modToProds    ModToProd[]
  ProductOrders ProductOrder?
  createdAt     DateTime?     @default(now())
  updatedAt     DateTime?     @updatedAt
}

model ModToProd {
  id           Int           @id @default(autoincrement())
  sum          Float
  product      Product       @relation(fields: [productId], references: [id])
  productId    Int
  modifier     Modifier      @relation(fields: [modifierId], references: [id])
  modifierId   Int
  productOrder ProductOrder?
  createdAt    DateTime?     @default(now())
  updatedAt    DateTime?     @updatedAt
}

model ProductOrder {
  id                Int                @id @default(autoincrement())
  quantity          Int
  price             Float
  modToProd         ModToProd?         @relation(fields: [modToProdId], references: [id])
  modToProdId       Int?               @unique
  product           Product?           @relation(fields: [productId], references: [id])
  productId         Int?               @unique
  modToProdsToOrder ModToProdToOrder[]
  order             Order?
  createdAt         DateTime?          @default(now())
  updatedAt         DateTime?          @updatedAt
}

model ModToProdToOrder {
  id                Int          @id @default(autoincrement())
  productOrder      ProductOrder @relation(fields: [productOrderId], references: [id])
  productOrderId    Int
  modifier          Modifier     @relation(fields: [modifierId], references: [id])
  modifierId        Int
  totalProductPrice Float
  order             Order?
  createdAt         DateTime?    @default(now())
  updatedAt         DateTime?    @updatedAt
}

model Order {
  id                 Int               @id @default(autoincrement())
  description        String?
  totalPrice         Float
  status             OrderStatus       @default(RECEIVED)
  isMods             Boolean
  user               User              @relation(fields: [userId], references: [id])
  userId             Int
  productsOrder      ProductOrder?     @relation(fields: [productOrderId], references: [id])
  productOrderId     Int?              @unique
  modToProdsToOrder  ModToProdToOrder? @relation(fields: [modToProdToOrderId], references: [id])
  modToProdToOrderId Int?              @unique
  transaction        Transaction?
  createdAt          DateTime?         @default(now())
  updatedAt          DateTime?         @updatedAt
}

model Transaction {
  id            Int            @id @default(autoincrement())
  source        String
  charge        String?
  refund        String?
  amount        Float
  status        ChargeStatus   @default(SUCCEEDED)
  currency      ChargeCurrency
  description   String?
  customerToken String
  order         Order?         @relation(fields: [orderId], references: [id])
  orderId       Int            @unique
  card          Card?          @relation(fields: [cardId], references: [id])
  cardId        Int
  createdAt     DateTime?      @default(now())
  updatedAt     DateTime?      @updatedAt
}

enum Role {
  CUSTOMER
  ADMIN
}

enum ChargeStatus {
  SUCCEEDED
  REFUNDED
}

enum ChargeCurrency {
  USD
  RUB
}

enum OrderStatus {
  RECEIVED
  PROCESSING
  READY
}
